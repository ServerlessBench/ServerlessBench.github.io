{
  "filename": "quick-start.md",
  "__html": "<h1>快速开始</h1>\n<h2>测试平台准备</h2>\n<p>当前的测试集已经被用于在<code>AWS Lambda</code>，<code>OpenWhisk</code>和<code>Fn Project</code>三个serverless平台上测试。</p>\n<h3>AWS Lambda</h3>\n<ul>\n<li><a href=\"https://portal.aws.amazon.com/billing/signup\">创建AWS账号</a>.</li>\n<li><a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started.html\">准备相关开发者工具</a>: <code>AWS CLI</code> and <code>SAM CLI</code>.</li>\n</ul>\n<h3>OpenWhisk</h3>\n<ul>\n<li>在测试机器设置好 OpenWhisk 和<code>wsk</code> cli 工具.</li>\n<li>配置 OpenWhisk 的 action invoker 的容器最大并发度为至少 <strong>20</strong> ，否则一些测试可能会由于资源不足而失败.</li>\n</ul>\n<h3>Fn Project</h3>\n<ul>\n<li>在测试机器设置好 Fn 环境。</li>\n</ul>\n<h2>相关依赖</h2>\n<ul>\n<li><code>gcc</code> &gt;= 7.0</li>\n<li><code>maven</code> &gt;= 3.6.0</li>\n<li><code>nodejs</code> &gt;= 12.0</li>\n<li><code>jq</code></li>\n<li><code>protobuf-compiler</code>, <code>libprotobuf-dev</code> &gt;= 3.0</li>\n<li><code>libcrypto++-dev</code> &gt;= 5.6.3</li>\n<li><code>python3</code></li>\n<li><code>libcap-dev</code></li>\n<li><code>libncurses5-dev</code></li>\n<li><code>libboost-dev</code></li>\n<li><code>libssl-dev</code></li>\n<li><code>autopoint</code></li>\n<li><code>help2man</code></li>\n<li><code>texinfo</code></li>\n<li><code>automake</code></li>\n<li><code>libtool</code></li>\n<li><code>pkg-config</code></li>\n<li><code>libhiredis-dev</code></li>\n<li><code>python3-boto3</code></li>\n</ul>\n<p>您可以使用以下指令在 Ubuntu 17.04 或更新版本的操作系统上安装这些依赖:</p>\n<pre><code>sudo apt-get install maven nodejs jq\\\n                     gcc-7 g++-7 protobuf-compiler libprotobuf-dev \\\n                     libcrypto++-dev libcap-dev \\\n                     libncurses5-dev libboost-dev libssl-dev autopoint help2man \\\n                     libhiredis-dev texinfo automake libtool pkg-config python3-boto3\n</code></pre>\n<p><strong>强烈推荐使用 Ubuntu 17.04 或更新的操作系统</strong></p>\n<h2>运行测试</h2>\n<p>对每个测试，请参照对应 testcase 文件夹里的 <code>README</code> 指导运行测试。\nDubbo 采用全 Spring 配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 <a href=\"https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html\">Spring 的 Schema 扩展</a> 进行加载。</p>\n<p>如果不想使用 Spring 配置，可以通过 <a href=\"./configuration/api.md\">API 的方式</a> 进行调用。</p>\n<h2>服务提供者</h2>\n<p>完整安装步骤，请参见：<a href=\"../admin/install/provider-demo.md\">示例提供者安装</a></p>\n<h3>定义服务接口</h3>\n<p>DemoService.java <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo.demo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<h3>在服务提供方实现接口</h3>\n<p>DemoServiceImpl.java <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>：</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">package</span> org.apache.dubbo.demo.provider;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.demo.DemoService;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n    }\n}\n</code></pre>\n<h3>用 Spring 配置声明暴露服务</h3>\n<p>provider.xml：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"hello-world-app\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span> /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span> /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span> /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 和本地bean一样实现服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoServiceImpl\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h3>加载 Spring 配置</h3>\n<p>Provider.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Provider</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/dubbo-demo-provider.xml\"</span>});\n        context.start();\n        System.in.read(); <span class=\"hljs-comment\">// 按任意键退出</span>\n    }\n}\n</code></pre>\n<h2>服务消费者</h2>\n<p>完整安装步骤，请参见：<a href=\"../admin/install/consumer-demo.md\">示例消费者安装</a></p>\n<h3>通过 Spring 配置引用远程服务</h3>\n<p>consumer.xml：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"consumer-of-helloworld-app\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span> /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.DemoService\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h3>加载Spring配置，并调用远程服务</h3>\n<p>Consumer.java <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.demo.DemoService;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n       ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[] {<span class=\"hljs-string\">\"META-INF/spring/dubbo-demo-consumer.xml\"</span>});\n        context.start();\n        DemoService demoService = (DemoService)context.getBean(<span class=\"hljs-string\">\"demoService\"</span>); <span class=\"hljs-comment\">// 获取远程服务代理</span>\n        String hello = demoService.sayHello(<span class=\"hljs-string\">\"world\"</span>); <span class=\"hljs-comment\">// 执行远程方法</span>\n        System.out.println( hello ); <span class=\"hljs-comment\">// 显示调用结果</span>\n    }\n}\n</code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>该接口需单独打包，在服务提供方和消费方共享 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>对服务消费方隐藏实现 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>也可以使用 IoC 注入 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
  "link": "/zh-cn/docs/user/quick-start.html",
  "meta": {
    "title": "快速开始"
  }
}